#include "stdafx.h"
#include "conio.h"
#include "iostream"
#include "windows.h"
#include "Game.h"

int mapa_juego[FILAS][COLUMNAS];

int main(array<System::String ^> ^args)
{
	Console::SetWindowSize(SCREEN_WIDTH, SCREEN_HEIGHT);
	Console::CursorVisible = false;
	

	while (true)
	{
		Console::Clear();
		inicio();

		nivel_1();
		imprimir_mapa();
		juego_nivel1();

		_getch();
		Console::Clear();

		nivel_2();
		imprimir_mapa();
		juego_nivel2();

		_getch();
		Console::Clear();

		nivel_3();
		imprimir_mapa();
		juego_nivel3();
		_getch();

		nivel_4();
		imprimir_mapa();
		juego_nivel4();

		_getch();
		Console::Clear();

		terminado();
	}
	return 0;

}


void inicio(){
	char tecla;
	int contador = 0;
	bool odd = false, title_odd = false;
	ConsoleColor clr;

	Console::Title = "MENU";
	
	while (true)
	{
		int x = 12;
		int y = 1;

		if (contador % 10 == 0)
		{
			clr = ConsoleColor::Magenta;
		}
		if (contador % 20 == 0)
		{
			clr = ConsoleColor::DarkMagenta;
		}

		Console::ForegroundColor = clr;

		title_odd = !title_odd;
		escribir_odd("      ______                             ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x, y++);
		escribir_odd("     / ____/_____________  _____  __     ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x, y++);
		escribir_odd("    / __/ / ___/ ___/ __ `/ __  \\/ _\\  ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x, y++);
		escribir_odd("   / /___(__  ) /__/ /_/ / /_/ /  __/    ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x, y++);
		escribir_odd("  /_____/____/\\___/\\__,_/ .___/\\___/  ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x, y++);
		escribir_odd("                       /_/               ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x, y++);

		title_odd = !title_odd;

		escribir_odd("    .___     .__     ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x + 6, y++);
		escribir_odd("  __| _/____ |  |    ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x + 6, y++);
		escribir_odd(" / __ |/ __ \\|  |    ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x + 6, y++);
		escribir_odd("/ /_/ \\  ___/|  |__  ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x + 6, y++);
		escribir_odd("\\____ |\\___  >____/  ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x + 6, y++);
		escribir_odd("     \\/    \\/ 	   ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x + 6, y++);
		title_odd = !title_odd;

		escribir_odd("_________        .__        ___.                       ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x - 6, y++);
		escribir_odd("\\_   ___ \\_____  |  | _____ \\_ |__   ________________  ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x - 6, y++);
		escribir_odd("/    \\  \\/\\__  \\ |  | \\__  \\ | __ \\ /  _ \\___   /  _ \\ ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x - 6, y++);
		escribir_odd("\\     \\____/ __ \\|  |__/ __ \\| \\_\\ (  <_> )    (  <_> )", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x - 6, y++);
		escribir_odd(" \\______  (____  /____(____  /___  /\\____/_____ \\____/ ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x - 6, y++);
		escribir_odd("        \\/     \\/          \\/    \\/            \\/      ", &title_odd, ConsoleColor::Magenta, ConsoleColor::DarkMagenta, x - 6, y++);

		y++; y++;
		title_odd = !title_odd;
		escribir_odd(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", &odd, ConsoleColor::Green, ConsoleColor::DarkGreen, x, y++);
		escribir_odd("^                                  v", &odd, ConsoleColor::Green, ConsoleColor::DarkGreen, x, y++);
		escribir_odd("^                                  v", &odd, ConsoleColor::Green, ConsoleColor::DarkGreen, x, y++);
		escribir_odd("^                                  v", &odd, ConsoleColor::Green, ConsoleColor::DarkGreen, x, y++);
		escribir_odd("^                                  v", &odd, ConsoleColor::Green, ConsoleColor::DarkGreen, x, y++);
		escribir_odd("^                                  v", &odd, ConsoleColor::Green, ConsoleColor::DarkGreen, x, y++);
		escribir_odd("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", &odd, ConsoleColor::Green, ConsoleColor::DarkGreen, x, y++);
		escribir("     DEVELOPED.BY.:.MRALEX6204    ", ConsoleColor::Green, x + 1, y - 4);
		title_odd = !title_odd;

		Console::ForegroundColor = ConsoleColor::Yellow;
		y++;
		Console::SetCursorPosition(25, y++); cout << "(S)tart";
		Console::SetCursorPosition(25, y++); cout << "(E)xit";

		if (_kbhit()) //decidir el juego 
		{
			tecla = _getch();
			if (tecla == 'e' || tecla == 'E') exit(0); //salir
			if (tecla == 's' || tecla == 'S') break; //empezar el juego
		}
		contador++;
	}
}
void nivel_1()
{
	Console::Title = "github.com/MrAlex6204 - Nivel 1";
	Console::Clear();
	int n1[FILAS][COLUMNAS] = {
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 },
		{ 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1 },
		{ 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 3, 3, 3, 4, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6 },
		{ 1, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6 },
		{ 1, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	};
	for (int f = 0; f < FILAS; f++){         //animaciones 
		for (int c = 0; c < COLUMNAS; c++){
			mapa_juego[f][c] = n1[f][c];  //teletransporte 
		}
	}
}
void nivel_2()
{
	Console::Title = "github.com/MrAlex6204 - Nivel 2";
	Console::Clear();
	int n2[FILAS][COLUMNAS] = {
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	};
	for (int f = 0; f < FILAS; f++){
		for (int c = 0; c < COLUMNAS; c++){
			mapa_juego[f][c] = n2[f][c];
		}
	}
}
void nivel_3()
{
	Console::Title = "github.com/MrAlex6204 - Nivel 3";
	Console::Clear();
	int n3[FILAS][COLUMNAS] = {
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 6 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },

	};
	for (int f = 0; f < FILAS; f++){
		for (int c = 0; c < COLUMNAS; c++){
			mapa_juego[f][c] = n3[f][c];
		}
	}
}
void nivel_4()
{
	Console::Title = "github.com/MrAlex6204 - Nivel 3";
	Console::Clear();
	int n4[FILAS][COLUMNAS] = {
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 1, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 1, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0, 1, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 4, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 4, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 1, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 1, 3, 1, 0, 3, 0, 1, 3, 0, 1, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 6, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 1, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	};
	for (int f = 0; f < FILAS; f++){
		for (int c = 0; c < COLUMNAS; c++){
			mapa_juego[f][c] = n4[f][c];
		}
	}
}

void juego_nivel1()
{
	Character personaje(12, 20);
	bool puerta_abierta = false;
	char tecla;
	int puntaje = 0;
	int vida = 3;
	bool EXIT_LEVEL = false;
	int contador = 0;
	Nave nave1, nave2;//Nave Enemigo 1 y 2	
	Random r;
	Pos pos_actual;

	/* CONFIGURACION E INICIALIZACION DEL NIVEL #1 */
	pos_actual.x = 12;
	pos_actual.y = 20;

	personaje.move_to(pos_actual, ConsoleColor::White);

	nave1.dir = DIR_DERECHA;
	nave1.pos.set(20, 1);//Indicar la posicion x & y	
	nave1.velocidad = 30;
	nave1.bala.velocidad = 10;
	nave1.dibujar(nave1.pos, ARRIBA, ConsoleColor::Red);//Dibujar nave

	nave2.dir = DIR_IZQUIERDA;
	nave2.pos.set(20, 36);//Indicar la posicion x & y	
	nave2.velocidad = 30;
	nave2.bala.velocidad = 10;
	nave2.dibujar(nave2.pos, ABAJO, ConsoleColor::Red);//Dibujar nave

	//Posicion inicial nave1.dir la bala
	nave1.bala.pos.y = nave1.pos.y;
	nave1.bala.pos.x = r.Next(5, 57);

	nave2.bala.pos.y = nave2.pos.y;
	nave2.bala.pos.x = r.Next(5, 57);

	while (!EXIT_LEVEL)
	{
		contador++;


		/* CONTROL DE NAVES */
		if (contador % nave1.velocidad == 0)//NAVE #1
		{

			nave1.borrar(nave1.pos, ARRIBA);

			//Verificar si la nave esta en lo limites 
			if (nave1.pos.x == 54) nave1.dir = DIR_IZQUIERDA;
			if (nave1.pos.x == 1)  nave1.dir = DIR_DERECHA;

			nave1.pos.x = nave1.pos.x + nave1.dir;

			nave1.dibujar(nave1.pos, ARRIBA, ConsoleColor::Red);
		}

		if (contador % nave2.velocidad == 0)//NAVE #2
		{

			nave2.borrar(nave2.pos, ABAJO);

			if (nave2.pos.x == 54)  nave2.dir = DIR_IZQUIERDA;
			if (nave2.pos.x == 1) nave2.dir = DIR_DERECHA;

			nave2.pos.x = nave2.pos.x + nave2.dir;

			nave2.dibujar(nave2.pos, ABAJO, ConsoleColor::Red);

		}

		/* CONTROL DE DISPAROS */

		/* DISPAROS DE LA NAVE #1 */
		if (contador % nave1.bala.velocidad == 0){

			if (nave1.pos.x == nave1.bala.pos.x)
			{
				nave1.bala.enabled = true;//Habilitar bala
				nave1.bala.pos.x = nave1.pos.x;
			}

			if (nave1.bala.pos.y >= 38){//Validar si la bala llego al borde limite
				nave1.bala.borrar(nave1.bala.pos);
				nave1.bala.enabled = false;
				nave1.bala.pos.x = r.Next(5, 38);
				nave1.bala.pos.y = nave1.pos.y;
			}

			if (nave1.bala.enabled)
			{

				if ((mapa_juego[nave1.bala.pos.y][nave1.bala.pos.x] != BLOCK) && !nave1.bala.pos.match(pos_actual)){
					nave1.bala.borrar(nave1.bala.pos);
				}

				if (nave1.bala.pos.y < 38) nave1.bala.pos.y++;

				if (mapa_juego[nave1.bala.pos.y][nave1.bala.pos.x] != BLOCK){
					//Dibujar bala en donde no hay blockes dibujados
					nave1.bala.dibujar(25, ConsoleColor::Red);
				}

				if (nave1.bala.pos.y >= 38)
				{
					nave1.bala.dibujar(15, ConsoleColor::DarkRed);
				}
			}

			if (nave1.bala.pos.match(pos_actual.x, pos_actual.y)){
				vida--;//Si la bala impacto al personaje
				nave1.bala.dibujar(15, ConsoleColor::Red);//Dibujar impacto de bala
				nave1.bala.pos.y = 38;
			}


		}

		/* DISPAROS DE LA NAVE #2 */
		if (contador % nave2.bala.velocidad == 0){

			if (nave2.pos.x == nave2.bala.pos.x)
			{
				nave2.bala.enabled = true;//Habilitar bala
				nave2.bala.pos.x = nave2.pos.x;
			}

			if (nave2.bala.pos.y <= 1){//Validar si la bala llego al borde limite
				nave2.bala.borrar(nave2.bala.pos);
				nave2.bala.enabled = false;
				nave2.bala.pos.x = r.Next(5, 38);
				nave2.bala.pos.y = nave2.pos.y;
			}

			if (nave2.bala.enabled)
			{
				//Borrar solo cuando en la posicion actual no haiga blockes
				if (mapa_juego[nave2.bala.pos.y][nave2.bala.pos.x] != BLOCK && !nave2.bala.pos.match(pos_actual)){

					nave2.bala.borrar(nave2.bala.pos);
				}

				if (nave2.bala.pos.y > 1) nave2.bala.pos.y--;

				if (mapa_juego[nave2.bala.pos.y][nave2.bala.pos.x] != BLOCK){

					//Dibujar bala en donde no hay blockes dibujados
					nave2.bala.dibujar(24, ConsoleColor::Red);
				}

				if (nave2.bala.pos.y <= 1)
				{
					nave2.bala.dibujar(15, ConsoleColor::DarkRed);
				}
			}

			//Validar si la bala le impacto al personaje
			if (nave2.bala.pos.match(pos_actual.x, pos_actual.y)){
				vida--;//Quitar una vida
				nave2.bala.dibujar(15, ConsoleColor::Red);//Dibujar impacto de bala
				nave2.bala.pos.y = 1;
			}


		}

		if (contador % 250 == 0){//Retardo en dibujar el personaje cuando reciba un impacto de bala
			//Dibujar el personaje en la nueva posicion
			personaje.move_to(pos_actual, ConsoleColor::White);
		}

		/* TABLERO DE PUNTUACION */
		Console::ForegroundColor = ConsoleColor::White;
		Console::SetCursorPosition(0, 40);
		cout << "Puntaje : " << puntaje;
		Console::SetCursorPosition(0, 41);
		cout << (char)03 << " Vidas : " << vida;


		/*CALCULAR LA NUEVA POSICION DEL PERSONAJE*/
		if (_kbhit()){

			Console::ForegroundColor = ConsoleColor::Cyan;
			tecla = _getch();

			if (tecla == ARRIBA){
				if (mapa_juego[pos_actual.y - 1][pos_actual.x] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.y--;//Mover una posicion hacia arriba

				}

			}
			else if (tecla == ABAJO){
				if (mapa_juego[pos_actual.y + 1][pos_actual.x] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.y++;//Mover una posicion hacia abajo

				}
			}
			else if (tecla == DERECHA){
				if (mapa_juego[pos_actual.y][pos_actual.x + 1] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.x++;//Mover una posicion hacia derecha

				}
			}
			else if (tecla == IZQUIERDA){
				if (mapa_juego[pos_actual.y][pos_actual.x - 1] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.x--;//Mover una posicion hacia la izquierda

				}
			}

			if (mapa_juego[pos_actual.y][pos_actual.x] == BLOCK){
				//Si la nueva posicion es un blocke agregar puntos y borrar el valor del mapa
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				puntaje++;

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == VIDA){
				//Si la nueva posicion es una vida agregar mas vidas y borrar el valor del mapa
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				vida++;

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == PUERTA){
				if (puerta_abierta){
					//Si la nueva posicion es una puerta y esta habilitada salir del nivel
					EXIT_LEVEL = true;
				}
				else{
					Console::ForegroundColor = ConsoleColor::DarkYellow;
					Console::SetCursorPosition(15, 40);
					cout << "**ENCUENTRA LA LLAVE PARA PODER SALIR**";

					//Retroceder un paso
					if (tecla == IZQUIERDA){
						pos_actual.x++;
					}
					else if (tecla == DERECHA){
						pos_actual.x--;
					}
					else if (tecla == ARRIBA)
					{
						pos_actual.y++;
					}
					else if (tecla == ABAJO){
						pos_actual.y--;
					}

				}

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == LLAVE){
				//Si la nueva posicion es una puerta salir del nivel
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				Console::ForegroundColor = ConsoleColor::Green;
				Console::SetCursorPosition(15, 40);
				cout << "**  PUERTA ABIERTA YA PUEDES  SALIR  **";
				puerta_abierta = true;
				abrir_puerta(mapa_juego);//Abrir la puerta

			}

			//Dibujar el personaje en la nueva posicion
			personaje.move_to(pos_actual, ConsoleColor::White);

		}


		if (puntaje == 104)break;
		if (vida < 0)EXIT_LEVEL = true;//Salir si no tiene vidas
	}

	if (vida < 0){
		gameover();
	}

}
void juego_nivel2()
{
	Character personaje(12, 20);
	bool puerta_abierta = false;
	char tecla;
	int puntaje = 0;
	int vida = 3;
	bool EXIT_LEVEL = false;
	int contador = 0;
	Nave nave1, nave2;//Nave Enemigo 1 y 2	
	Random r;
	Pos pos_actual;


	/* CONFIGURACION E INICIALIZACION DEL NIVEL #1 */
	pos_actual.x = 12;
	pos_actual.y = 20;
	personaje.move_to(pos_actual, ConsoleColor::White);

	Console::SetCursorPosition(pos_actual.x, pos_actual.y);
	cout << (char)12;

	nave1.dir = DIR_ABAJO;
	nave1.pos.set(1, 1);//Indicar la posicion x & y	
	nave1.velocidad = 20;
	nave1.bala.velocidad = 5;
	nave1.dibujar(nave1.pos, IZQUIERDA, ConsoleColor::Red);//Dibujar nave

	nave2.dir = DIR_ARRIBA;
	nave2.pos.set(55, 34);//Indicar la posicion x & y	
	nave2.velocidad = 20;
	nave2.bala.velocidad = 5;
	nave2.dibujar(nave2.pos, DERECHA, ConsoleColor::Red);//Dibujar nave

	//Posicion inicial nave1.dir la bala
	nave1.bala.pos.x = 3;
	nave1.bala.pos.y = 3;

	nave2.bala.pos.x = 55;
	nave2.bala.pos.y = 36;

	while (!EXIT_LEVEL)
	{
		contador++;

		/* CONTROL DE NAVES */
		if (contador % nave1.velocidad == 0)//NAVE #1
		{

			nave1.borrar(nave1.pos, IZQUIERDA);

			//Verificar si la nave esta en lo limites 
			if (nave1.pos.y == 34) nave1.dir = DIR_ARRIBA;
			if (nave1.pos.y == 1)  nave1.dir = DIR_ABAJO;

			nave1.pos.y = nave1.pos.y + nave1.dir;

			nave1.dibujar(nave1.pos, IZQUIERDA, ConsoleColor::Red);
		}

		if (contador % nave2.velocidad == 0)//NAVE #2
		{

			nave2.borrar(nave2.pos, DERECHA);

			if (nave2.pos.y == 34) nave2.dir = DIR_ARRIBA;
			if (nave2.pos.y == 1)  nave2.dir = DIR_ABAJO;

			nave2.pos.y = nave2.pos.y + nave2.dir;

			nave2.dibujar(nave2.pos, DERECHA, ConsoleColor::Red);

		}

		/* CONTROL DE DISPAROS */

		/* DISPAROS DE LA NAVE #1 */
		if (contador % nave1.bala.velocidad == 0){

			if ((nave1.pos.y + 2) == nave1.bala.pos.y)
			{
				nave1.bala.enabled = true;//Habilitar bala				
			}


			if (nave1.bala.pos.x >= 58){//Validar si la bala llego al borde limite
				nave1.bala.borrar(nave1.bala.pos);
				nave1.bala.enabled = false;
				nave1.bala.pos.x = 3;
				nave1.bala.pos.y = r.Next(3, 37);
			}

			if (nave1.bala.enabled)
			{

				if (mapa_juego[nave1.bala.pos.y][nave1.bala.pos.x] != BLOCK && !nave1.bala.pos.match(pos_actual)){
					nave1.bala.borrar(nave1.bala.pos);
				}

				if (nave1.bala.pos.x <= 57) nave1.bala.pos.x++;

				if (mapa_juego[nave1.bala.pos.y][nave1.bala.pos.x] != BLOCK){
					//Dibujar bala en donde no hay blockes dibujados
					nave1.bala.dibujar(26, ConsoleColor::Red);
				}

				if (nave1.bala.pos.x >= 58)
				{
					nave1.bala.dibujar(15, ConsoleColor::DarkRed);
				}
			}

			if (nave1.bala.pos.match(pos_actual.x, pos_actual.y)){
				vida--;//Si la bala impacto al personaje
				nave1.bala.dibujar(15, ConsoleColor::Red);//Dibujar impacto de bala
				nave1.bala.pos.x = 40;
			}

		}

		/* DISPAROS DE LA NAVE #2 */
		if (contador % nave2.bala.velocidad == 0){

			if ((nave2.pos.y + 2) == nave2.bala.pos.y)
			{
				nave2.bala.enabled = true;//Habilitar bala				
			}

			if (nave2.bala.pos.x <= 1){//Validar si la bala llego al borde limite
				nave2.bala.borrar(nave2.bala.pos);
				nave2.bala.enabled = false;
				nave2.bala.pos.y = r.Next(3, 34);
				nave2.bala.pos.x = 55;
			}

			if (nave2.bala.enabled)
			{
				//Borrar solo cuando en la posicion actual no haiga blockes
				if (mapa_juego[nave2.bala.pos.y][nave2.bala.pos.x] != BLOCK && !nave2.bala.pos.match(pos_actual)){

					nave2.bala.borrar(nave2.bala.pos);
				}

				if (nave2.bala.pos.x >= 1) nave2.bala.pos.x--;

				if (mapa_juego[nave2.bala.pos.y][nave2.bala.pos.x] != BLOCK){

					//Dibujar bala en donde no hay blockes dibujados
					nave2.bala.dibujar(27, ConsoleColor::Red);
				}

				if (nave2.bala.pos.x <= 1)
				{
					nave2.bala.dibujar(15, ConsoleColor::DarkRed);
				}
			}

			//Validar si la bala le impacto al personaje
			if (nave2.bala.pos.match(pos_actual.x, pos_actual.y)){
				vida--;//Quitar una vida
				nave2.bala.dibujar(15, ConsoleColor::Red);//Dibujar impacto de bala
				nave2.bala.pos.y = 1;
			}


		}

		if (contador % 250 == 0){//Retardo en dibujar el personaje cuando reciba un impacto de bala
			//Dibujar el personaje en la nueva posicion
			personaje.move_to(pos_actual, ConsoleColor::White);
		}

		/* TABLERO DE PUNTUACION */
		Console::ForegroundColor = ConsoleColor::White;
		Console::SetCursorPosition(0, 40);
		cout << "Puntaje : " << puntaje;
		Console::SetCursorPosition(0, 41);
		cout << (char)03 << " Vidas : " << vida;


		/*CALCULAR LA NUEVA POSICION DEL PERSONAJE*/
		if (_kbhit()){

			Console::ForegroundColor = ConsoleColor::Cyan;
			tecla = _getch();

			if (tecla == ARRIBA){
				if (mapa_juego[pos_actual.y - 1][pos_actual.x] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.y--;//Mover una posicion hacia arriba

				}

			}
			else if (tecla == ABAJO){
				if (mapa_juego[pos_actual.y + 1][pos_actual.x] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.y++;//Mover una posicion hacia abajo

				}
			}
			else if (tecla == DERECHA){
				if (mapa_juego[pos_actual.y][pos_actual.x + 1] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.x++;//Mover una posicion hacia derecha

				}
			}
			else if (tecla == IZQUIERDA){
				if (mapa_juego[pos_actual.y][pos_actual.x - 1] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.x--;//Mover una posicion hacia la izquierda

				}
			}

			if (mapa_juego[pos_actual.y][pos_actual.x] == BLOCK){
				//Si la nueva posicion es un blocke agregar puntos y borrar el valor del mapa
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				puntaje++;

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == VIDA){
				//Si la nueva posicion es una vida agregar mas vidas y borrar el valor del mapa
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				vida++;

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == PUERTA){
				if (puerta_abierta){
					//Si la nueva posicion es una puerta y esta habilitada salir del nivel
					EXIT_LEVEL = true;
				}
				else{
					Console::ForegroundColor = ConsoleColor::DarkYellow;
					Console::SetCursorPosition(15, 40);
					cout << "**ENCUENTRA LA LLAVE PARA PODER SALIR**";

					//Retroceder un paso
					if (tecla == IZQUIERDA){
						pos_actual.x++;
					}
					else if (tecla == DERECHA){
						pos_actual.x--;
					}
					else if (tecla == ARRIBA)
					{
						pos_actual.y++;
					}
					else if (tecla == ABAJO){
						pos_actual.y--;
					}

				}

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == LLAVE){
				//Si la nueva posicion es una puerta salir del nivel
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				Console::ForegroundColor = ConsoleColor::Green;
				Console::SetCursorPosition(15, 40);
				cout << "**  PUERTA ABIERTA YA PUEDES  SALIR  **";
				puerta_abierta = true;
				abrir_puerta(mapa_juego);//Abrir puerta

			}

			//Dibujar el personaje en la nueva posicion
			personaje.move_to(pos_actual, ConsoleColor::White);

		}

		if (puntaje == 104)break;
		if (vida < 0)EXIT_LEVEL = true;//Salir si no tiene vidas
	}

	if (vida < 0){
		gameover();
	}
}
void juego_nivel3()
{
	Character personaje(12, 20);
	bool puerta_abierta = false;
	char tecla;
	int puntaje = 0;
	int vida = 3;
	bool EXIT_LEVEL = false;
	int contador = 0;
	Nave nave1, nave2;//Nave Enemigo 1 y 2	
	Random r;
	Pos pos_actual;


	/* CONFIGURACION E INICIALIZACION DEL NIVEL #1 */
	pos_actual.x = 12;
	pos_actual.y = 20;

	personaje.move_to(pos_actual, ConsoleColor::White);



	nave1.dir = DIR_ABAJO;
	nave1.pos.set(1, 1);//Indicar la posicion x & y	
	nave1.velocidad = 10;
	nave1.bala.velocidad = 2;
	nave1.dibujar(nave1.pos, IZQUIERDA, ConsoleColor::Red);//Dibujar nave

	nave2.dir = DIR_ARRIBA;
	nave2.pos.set(55, 34);//Indicar la posicion x & y	
	nave2.velocidad = 20;
	nave2.bala.velocidad = 2;
	nave2.dibujar(nave2.pos, DERECHA, ConsoleColor::Red);//Dibujar nave

	//Posicion inicial nave1.dir la bala
	nave1.bala.pos.x = 3;
	nave1.bala.pos.y = 3;

	nave2.bala.pos.x = 55;
	nave2.bala.pos.y = 36;

	while (!EXIT_LEVEL)
	{
		contador++;

		/* CONTROL DE NAVES */
		if (contador % nave1.velocidad == 0)//NAVE #1
		{

			nave1.borrar(nave1.pos, IZQUIERDA);

			//Verificar si la nave esta en lo limites 
			if (nave1.pos.y == 34) nave1.dir = DIR_ARRIBA;
			if (nave1.pos.y == 1)  nave1.dir = DIR_ABAJO;

			nave1.pos.y = nave1.pos.y + nave1.dir;

			nave1.dibujar(nave1.pos, IZQUIERDA, ConsoleColor::Red);
		}

		if (contador % nave2.velocidad == 0)//NAVE #2
		{

			nave2.borrar(nave2.pos, DERECHA);

			if (nave2.pos.y == 34) nave2.dir = DIR_ARRIBA;
			if (nave2.pos.y == 1)  nave2.dir = DIR_ABAJO;

			nave2.pos.y = nave2.pos.y + nave2.dir;

			nave2.dibujar(nave2.pos, DERECHA, ConsoleColor::Red);

		}

		/* CONTROL DE DISPAROS */

		/* DISPAROS DE LA NAVE #1 */
		if (contador % nave1.bala.velocidad == 0){

			if ((nave1.pos.y + 2) == nave1.bala.pos.y)
			{
				nave1.bala.enabled = true;//Habilitar bala				
			}


			if (nave1.bala.pos.x >= 58){//Validar si la bala llego al borde limite
				nave1.bala.borrar(nave1.bala.pos);
				nave1.bala.enabled = false;
				nave1.bala.pos.x = 3;
				nave1.bala.pos.y = r.Next(3, 37);
			}

			if (nave1.bala.enabled)
			{

				if (mapa_juego[nave1.bala.pos.y][nave1.bala.pos.x] != BLOCK && !nave1.bala.pos.match(pos_actual)){
					nave1.bala.borrar(nave1.bala.pos);
				}

				if (nave1.bala.pos.x <= 57) nave1.bala.pos.x++;

				if (mapa_juego[nave1.bala.pos.y][nave1.bala.pos.x] != BLOCK){
					//Dibujar bala en donde no hay blockes dibujados
					nave1.bala.dibujar(26, ConsoleColor::Red);
				}

				if (nave1.bala.pos.x >= 58)
				{
					nave1.bala.dibujar(15, ConsoleColor::Yellow);
				}
			}

			if (nave1.bala.pos.match(pos_actual.x, pos_actual.y)){
				vida--;//Si la bala impacto al personaje
				nave1.bala.dibujar(15, ConsoleColor::Red);//Dibujar impacto de bala
				nave1.bala.pos.x = 40;
			}

		}

		/* DISPAROS DE LA NAVE #2 */
		if (contador % nave2.bala.velocidad == 0){

			if ((nave2.pos.y + 2) == nave2.bala.pos.y)
			{
				nave2.bala.enabled = true;//Habilitar bala				
			}

			if (nave2.bala.pos.x <= 1){//Validar si la bala llego al borde limite
				nave2.bala.borrar(nave2.bala.pos);
				nave2.bala.enabled = false;
				nave2.bala.pos.y = r.Next(3, 34);
				nave2.bala.pos.x = 55;
			}

			if (nave2.bala.enabled)
			{
				//Borrar solo cuando en la posicion actual no haiga blockes
				if (mapa_juego[nave2.bala.pos.y][nave2.bala.pos.x] != BLOCK && !nave2.bala.pos.match(pos_actual)){

					nave2.bala.borrar(nave2.bala.pos);
				}

				if (nave2.bala.pos.x >= 1) nave2.bala.pos.x--;

				if (mapa_juego[nave2.bala.pos.y][nave2.bala.pos.x] != BLOCK){

					//Dibujar bala en donde no hay blockes dibujados
					nave2.bala.dibujar(27, ConsoleColor::Red);
				}

				if (nave2.bala.pos.x <= 1)
				{
					nave2.bala.dibujar(15, ConsoleColor::Yellow);
				}
			}

			//Validar si la bala le impacto al personaje
			if (nave2.bala.pos.match(pos_actual.x, pos_actual.y)){
				vida--;//Quitar una vida
				nave2.bala.dibujar(15, ConsoleColor::Red);//Dibujar impacto de bala
				nave2.bala.pos.y = 1;
			}


		}

		if (contador % 250 == 0){//Retardo en dibujar el personaje cuando reciba un impacto de bala
			//Dibujar el personaje en la nueva posicion
			personaje.move_to(pos_actual, ConsoleColor::White);
		}

		/* TABLERO DE PUNTUACION */
		Console::ForegroundColor = ConsoleColor::White;
		Console::SetCursorPosition(0, 40);
		cout << "Puntaje : " << puntaje;
		Console::SetCursorPosition(0, 41);
		cout << (char)03 << " Vidas : " << vida;


		/*CALCULAR LA NUEVA POSICION DEL PERSONAJE*/
		if (_kbhit()){

			Console::ForegroundColor = ConsoleColor::Cyan;
			tecla = _getch();


			if (tecla == ARRIBA){
				if (mapa_juego[pos_actual.y - 1][pos_actual.x] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.y--;//Mover una posicion hacia arriba

				}

			}
			else if (tecla == ABAJO){
				if (mapa_juego[pos_actual.y + 1][pos_actual.x] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.y++;//Mover una posicion hacia abajo

				}
			}
			else if (tecla == DERECHA){
				if (mapa_juego[pos_actual.y][pos_actual.x + 1] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.x++;//Mover una posicion hacia derecha

				}
			}
			else if (tecla == IZQUIERDA){
				if (mapa_juego[pos_actual.y][pos_actual.x - 1] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.x--;//Mover una posicion hacia la izquierda

				}
			}

			if (mapa_juego[pos_actual.y][pos_actual.x] == BLOCK){
				//Si la nueva posicion es un blocke agregar puntos y borrar el valor del mapa
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				puntaje++;

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == VIDA){
				//Si la nueva posicion es una vida agregar mas vidas y borrar el valor del mapa
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				vida++;

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == PUERTA){
				if (puerta_abierta){
					//Si la nueva posicion es una puerta y esta habilitada salir del nivel
					EXIT_LEVEL = true;
				}
				else{
					Console::ForegroundColor = ConsoleColor::DarkYellow;
					Console::SetCursorPosition(15, 40);
					cout << "**ENCUENTRA LA LLAVE PARA PODER SALIR**";

					//Retroceder un paso
					if (tecla == IZQUIERDA){
						pos_actual.x++;
					}
					else if (tecla == DERECHA){
						pos_actual.x--;
					}
					else if (tecla == ARRIBA)
					{
						pos_actual.y++;
					}
					else if (tecla == ABAJO){
						pos_actual.y--;
					}

				}

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == LLAVE){
				//Si la nueva posicion es una puerta salir del nivel
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				Console::ForegroundColor = ConsoleColor::Green;
				Console::SetCursorPosition(15, 40);
				cout << "**  PUERTA ABIERTA YA PUEDES  SALIR  **";
				puerta_abierta = true;
				abrir_puerta(mapa_juego);//Abrir puerta

			}

			//Dibujar el personaje en la nueva posicion
			personaje.move_to(pos_actual, ConsoleColor::White);

		}

		if (puntaje == 104)break;
		if (vida < 0)EXIT_LEVEL = true;//Salir si no tiene vidas
	}

	if (vida < 0){
		gameover();
	}
}
void juego_nivel4()
{
	Character personaje(12, 20);
	bool puerta_abierta = false;
	char tecla;
	int puntaje = 0;
	int vida = 3;
	bool EXIT_LEVEL = false;
	int contador = 0;
	Nave nave1, nave2, nave3, nave4;//Nave Enemigo 1 y 2	
	Random r;
	Pos pos_actual;


	/* CONFIGURACION E INICIALIZACION DEL NIVEL #1 */
	pos_actual.x = 12;
	pos_actual.y = 20;

	personaje.move_to(pos_actual, ConsoleColor::White);

	nave1.dir = DIR_ABAJO;
	nave1.pos.set(1, 1);//Indicar la posicion x & y	
	nave1.velocidad = 10;
	nave1.bala.velocidad = 4;
	nave1.dibujar(nave1.pos, IZQUIERDA, ConsoleColor::Red);//Dibujar nave

	nave2.dir = DIR_ARRIBA;
	nave2.pos.set(55, 34);//Indicar la posicion x & y	
	nave2.velocidad = 20;
	nave2.bala.velocidad = 4;
	nave2.dibujar(nave2.pos, DERECHA, ConsoleColor::Red);//Dibujar nave

	//Posicion inicial nave1.dir la bala
	nave1.bala.pos.x = 3;
	nave1.bala.pos.y = 3;

	nave2.bala.pos.x = 55;
	nave2.bala.pos.y = 36;


	nave3.dir = DIR_DERECHA;
	nave3.pos.set(20, 1);//Indicar la posicion x & y	
	nave3.velocidad = 15;
	nave3.bala.velocidad = 6;
	nave3.dibujar(nave3.pos, ARRIBA, ConsoleColor::Red);//Dibujar nave

	nave4.dir = DIR_IZQUIERDA;
	nave4.pos.set(20, 36);//Indicar la posicion x & y	
	nave4.velocidad = 15;
	nave4.bala.velocidad = 6;
	nave4.dibujar(nave4.pos, ABAJO, ConsoleColor::Red);//Dibujar nave

	//Posicion inicial nave1.dir la bala
	nave3.bala.pos.y = nave1.pos.y;
	nave3.bala.pos.x = r.Next(5, 57);

	nave4.bala.pos.y = nave2.pos.y;
	nave4.bala.pos.x = r.Next(5, 57);


	while (!EXIT_LEVEL)
	{
		contador++;

		/* CONTROL DE NAVES */
		if (contador % nave1.velocidad == 0)//NAVE #1
		{

			nave1.borrar(nave1.pos, IZQUIERDA);

			//Verificar si la nave esta en lo limites 
			if (nave1.pos.y == 34) nave1.dir = DIR_ARRIBA;
			if (nave1.pos.y == 1)  nave1.dir = DIR_ABAJO;

			nave1.pos.y = nave1.pos.y + nave1.dir;

			nave1.dibujar(nave1.pos, IZQUIERDA, ConsoleColor::Red);
		}

		if (contador % nave2.velocidad == 0)//NAVE #2
		{

			nave2.borrar(nave2.pos, DERECHA);

			if (nave2.pos.y == 34) nave2.dir = DIR_ARRIBA;
			if (nave2.pos.y == 1)  nave2.dir = DIR_ABAJO;

			nave2.pos.y = nave2.pos.y + nave2.dir;

			nave2.dibujar(nave2.pos, DERECHA, ConsoleColor::Red);

		}

		if (contador % nave3.velocidad == 0)//NAVE #1
		{

			nave3.borrar(nave3.pos, ARRIBA);

			//Verificar si la nave esta en lo limites 
			if (nave3.pos.x == 54) nave3.dir = DIR_IZQUIERDA;
			if (nave3.pos.x == 1)  nave3.dir = DIR_DERECHA;

			nave3.pos.x = nave3.pos.x + nave3.dir;

			nave3.dibujar(nave3.pos, ARRIBA, ConsoleColor::Red);
		}

		if (contador % nave4.velocidad == 0)//NAVE #2
		{

			nave4.borrar(nave4.pos, ABAJO);

			if (nave4.pos.x == 54)  nave4.dir = DIR_IZQUIERDA;
			if (nave4.pos.x == 1) nave4.dir = DIR_DERECHA;

			nave4.pos.x = nave4.pos.x + nave4.dir;

			nave4.dibujar(nave4.pos, ABAJO, ConsoleColor::Red);

		}

		/* CONTROL DE DISPAROS */

		/* DISPAROS DE LA NAVE #1 */
		if (contador % nave1.bala.velocidad == 0){

			if ((nave1.pos.y + 2) == nave1.bala.pos.y)
			{
				nave1.bala.enabled = true;//Habilitar bala				
			}


			if (nave1.bala.pos.x >= 58){//Validar si la bala llego al borde limite
				nave1.bala.borrar(nave1.bala.pos);
				nave1.bala.enabled = false;
				nave1.bala.pos.x = 3;
				nave1.bala.pos.y = r.Next(3, 37);
			}

			if (nave1.bala.enabled)
			{

				if (mapa_juego[nave1.bala.pos.y][nave1.bala.pos.x] != BLOCK && !nave1.bala.pos.match(pos_actual)){
					nave1.bala.borrar(nave1.bala.pos);
				}

				if (nave1.bala.pos.x <= 57) nave1.bala.pos.x++;

				if (mapa_juego[nave1.bala.pos.y][nave1.bala.pos.x] != BLOCK){
					//Dibujar bala en donde no hay blockes dibujados
					nave1.bala.dibujar(26, ConsoleColor::Red);
				}

				if (nave1.bala.pos.x >= 58)
				{
					nave1.bala.dibujar(15, ConsoleColor::Yellow);
				}
			}

			if (nave1.bala.pos.match(pos_actual.x, pos_actual.y)){
				vida--;//Si la bala impacto al personaje
				nave1.bala.dibujar(15, ConsoleColor::Red);//Dibujar impacto de bala
				nave1.bala.pos.x = 40;
			}

		}

		/* DISPAROS DE LA NAVE #2 */
		if (contador % nave2.bala.velocidad == 0){

			if ((nave2.pos.y + 2) == nave2.bala.pos.y)
			{
				nave2.bala.enabled = true;//Habilitar bala				
			}

			if (nave2.bala.pos.x <= 1){//Validar si la bala llego al borde limite
				nave2.bala.borrar(nave2.bala.pos);
				nave2.bala.enabled = false;
				nave2.bala.pos.y = r.Next(3, 34);
				nave2.bala.pos.x = 55;
			}

			if (nave2.bala.enabled)
			{
				//Borrar solo cuando en la posicion actual no haiga blockes
				if (mapa_juego[nave2.bala.pos.y][nave2.bala.pos.x] != BLOCK && !nave2.bala.pos.match(pos_actual)){

					nave2.bala.borrar(nave2.bala.pos);
				}

				if (nave2.bala.pos.x >= 1) nave2.bala.pos.x--;

				if (mapa_juego[nave2.bala.pos.y][nave2.bala.pos.x] != BLOCK){

					//Dibujar bala en donde no hay blockes dibujados
					nave2.bala.dibujar(27, ConsoleColor::Red);
				}

				if (nave2.bala.pos.x <= 1)
				{
					nave2.bala.dibujar(15, ConsoleColor::Yellow);
				}
			}

			//Validar si la bala le impacto al personaje
			if (nave2.bala.pos.match(pos_actual.x, pos_actual.y)){
				vida--;//Quitar una vida
				nave2.bala.dibujar(15, ConsoleColor::Red);//Dibujar impacto de bala
				nave2.bala.pos.y = 1;
			}


		}

		/* DISPAROS DE LA NAVE #3 */
		if (contador % nave3.bala.velocidad == 0){

			if (nave3.pos.x == nave3.bala.pos.x)
			{
				nave3.bala.enabled = true;//Habilitar bala
				nave3.bala.pos.x = nave3.pos.x;
			}

			if (nave3.bala.pos.y >= 38){//Validar si la bala llego al borde limite
				nave3.bala.borrar(nave3.bala.pos);
				nave3.bala.enabled = false;
				nave3.bala.pos.x = r.Next(5, 38);
				nave3.bala.pos.y = nave3.pos.y;
			}

			if (nave3.bala.enabled)
			{

				if (mapa_juego[nave3.bala.pos.y][nave3.bala.pos.x] != BLOCK && !nave3.bala.pos.match(pos_actual)){
					nave3.bala.borrar(nave3.bala.pos);
				}

				if (nave3.bala.pos.y < 38) nave3.bala.pos.y++;

				if (mapa_juego[nave3.bala.pos.y][nave3.bala.pos.x] != BLOCK){
					//Dibujar bala en donde no hay blockes dibujados
					nave3.bala.dibujar(25, ConsoleColor::Red);
				}

				if (nave3.bala.pos.y >= 38)
				{
					nave3.bala.dibujar(15, ConsoleColor::DarkRed);
				}
			}

			if (nave3.bala.pos.match(pos_actual.x, pos_actual.y)){
				vida--;//Si la bala impacto al personaje
				nave3.bala.dibujar(15, ConsoleColor::Red);//Dibujar impacto de bala
				nave3.bala.pos.y = 38;
			}


		}

		/* DISPAROS DE LA NAVE #3 */
		if (contador % nave4.bala.velocidad == 0){

			if (nave4.pos.x == nave4.bala.pos.x)
			{
				nave4.bala.enabled = true;//Habilitar bala
				nave4.bala.pos.x = nave4.pos.x;
			}

			if (nave4.bala.pos.y <= 1){//Validar si la bala llego al borde limite
				nave4.bala.borrar(nave4.bala.pos);
				nave4.bala.enabled = false;
				nave4.bala.pos.x = r.Next(5, 38);
				nave4.bala.pos.y = nave4.pos.y;
			}

			if (nave4.bala.enabled)
			{
				//Borrar solo cuando en la posicion actual no haiga blockes
				if (mapa_juego[nave4.bala.pos.y][nave4.bala.pos.x] != BLOCK && !nave4.bala.pos.match(pos_actual)){

					nave4.bala.borrar(nave4.bala.pos);
				}

				if (nave4.bala.pos.y > 1) nave4.bala.pos.y--;

				if (mapa_juego[nave4.bala.pos.y][nave4.bala.pos.x] != BLOCK){

					//Dibujar bala en donde no hay blockes dibujados
					nave4.bala.dibujar(24, ConsoleColor::Red);
				}

				if (nave4.bala.pos.y <= 1)
				{
					nave4.bala.dibujar(15, ConsoleColor::DarkRed);
				}
			}

			//Validar si la bala le impacto al personaje
			if (nave4.bala.pos.match(pos_actual.x, pos_actual.y)){
				vida--;//Quitar una vida
				nave4.bala.dibujar(15, ConsoleColor::Red);//Dibujar impacto de bala
				nave4.bala.pos.y = 1;
			}


		}

		if (contador % 250 == 0){//Retardo en dibujar el personaje cuando reciba un impacto de bala
			//Dibujar el personaje en la nueva posicion
			personaje.move_to(pos_actual, ConsoleColor::White);
		}

		/* TABLERO DE PUNTUACION */
		Console::ForegroundColor = ConsoleColor::White;
		Console::SetCursorPosition(0, 40);
		cout << "Puntaje : " << puntaje;
		Console::SetCursorPosition(0, 41);
		cout << (char)03 << " Vidas : " << vida;


		/*CALCULAR LA NUEVA POSICION DEL PERSONAJE*/
		if (_kbhit()){

			Console::ForegroundColor = ConsoleColor::Cyan;
			tecla = _getch();


			if (tecla == ARRIBA){
				if (mapa_juego[pos_actual.y - 1][pos_actual.x] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.y--;//Mover una posicion hacia arriba

				}

			}
			else if (tecla == ABAJO){
				if (mapa_juego[pos_actual.y + 1][pos_actual.x] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.y++;//Mover una posicion hacia abajo

				}
			}
			else if (tecla == DERECHA){
				if (mapa_juego[pos_actual.y][pos_actual.x + 1] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.x++;//Mover una posicion hacia derecha

				}
			}
			else if (tecla == IZQUIERDA){
				if (mapa_juego[pos_actual.y][pos_actual.x - 1] != BORDE){//Validar que la posicion no sea el borde

					pos_actual.x--;//Mover una posicion hacia la izquierda

				}
			}

			if (mapa_juego[pos_actual.y][pos_actual.x] == BLOCK){
				//Si la nueva posicion es un blocke agregar puntos y borrar el valor del mapa
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				puntaje++;

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == VIDA){
				//Si la nueva posicion es una vida agregar mas vidas y borrar el valor del mapa
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				vida++;

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == PUERTA){
				if (puerta_abierta){
					//Si la nueva posicion es una puerta y esta habilitada salir del nivel
					EXIT_LEVEL = true;
				}
				else{
					Console::ForegroundColor = ConsoleColor::DarkYellow;
					Console::SetCursorPosition(15, 40);
					cout << "**ENCUENTRA LA LLAVE PARA PODER SALIR**";

					//Retroceder un paso
					if (tecla == IZQUIERDA){
						pos_actual.x++;
					}
					else if (tecla == DERECHA){
						pos_actual.x--;
					}
					else if (tecla == ARRIBA)
					{
						pos_actual.y++;
					}
					else if (tecla == ABAJO){
						pos_actual.y--;
					}

				}

			}
			else if (mapa_juego[pos_actual.y][pos_actual.x] == LLAVE){
				//Si la nueva posicion es una puerta salir del nivel
				mapa_juego[pos_actual.y][pos_actual.x] = 0;
				Console::ForegroundColor = ConsoleColor::Green;
				Console::SetCursorPosition(15, 40);
				cout << "**  PUERTA ABIERTA YA PUEDES  SALIR  **";
				puerta_abierta = true;
				abrir_puerta(mapa_juego);//Abrir puerta
			}

			//Dibujar el personaje en la nueva posicion
			personaje.move_to(pos_actual, ConsoleColor::White);

		}

		if (puntaje == 104)break;
		if (vida < 0)EXIT_LEVEL = true;//Salir si no tiene vidas
	}

	if (vida < 0){
		gameover();
	}
}

void imprimir_mapa()
{
	Random rnd;
	int llave_c = rnd.Next(5, COLUMNAS - 5), llave_f = rnd.Next(5, FILAS - 5);

	do{
		/*
			Encontrar un block aleatoriamente para ocultar la llave
			de la puerta del nivel
			*/

		llave_c = rnd.Next(5, COLUMNAS - 5);
		llave_f = rnd.Next(5, FILAS - 5);
	} while (mapa_juego[llave_f][llave_c] != BLOCK);

	mapa_juego[llave_f][llave_c] = LLAVE;//Ocultar llave aleatoriamente


	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			if (mapa_juego[f][c] == 0) cout << " ";
			if (mapa_juego[f][c] == BORDE) { Console::ForegroundColor = COLOR_BORDE; cout << CHR_BORDE; }
			if (mapa_juego[f][c] == VIDA)  { Console::ForegroundColor = COLOR_VIDA; cout << CHR_VIDA; }
			if (mapa_juego[f][c] == LLAVE) { Console::ForegroundColor = COLOR_LLAVE; cout << CHR_LLAVE; }
			if (mapa_juego[f][c] == BLOCK) { Console::ForegroundColor = COLOR_BLOCK; cout << CHR_BLOCK; }
			if (mapa_juego[f][c] == PUERTA){ Console::ForegroundColor = COLOR_PUERTA; cout << CHR_PUERTA_CERRADA; }
		}
		cout << "\n";
	}
}
void terminado()
{
	char tecla;
	bool odd = false;
	int contador = 0;
	Console::Title = "FIN";
	while (1)
	{
		int x = 12;
		int y = 10;
		Console::SetWindowSize(65, 42);
		odd = !odd;
		escribir_odd("   ______                       __          ",&odd,ConsoleColor::Magenta,ConsoleColor::DarkMagenta,x,y++);
		escribir_odd("  / ____/___ _____  ____ ______/ /____      ",&odd,ConsoleColor::Magenta,ConsoleColor::DarkMagenta,x,y++);
		escribir_odd(" / / __/ __ `/ __ \\/ __ `/ ___/ __/ _ \\   ",&odd,ConsoleColor::Magenta,ConsoleColor::DarkMagenta,x,y++);
		escribir_odd("/ /_/ / /_/ / / / / /_/ (__  ) /_/  __/     ",&odd,ConsoleColor::Magenta,ConsoleColor::DarkMagenta,x,y++);
		escribir_odd("\\____/\\__,_/_/ /_/\\__,_/____/\\__/\\___/ ",&odd,ConsoleColor::Magenta,ConsoleColor::DarkMagenta,x,y++);
		odd = !odd;
		Console::ForegroundColor = ConsoleColor::White;		
		Console::SetCursorPosition(22, y+3); cout << "(S)alir del juego";

		if (_kbhit())
		{
			tecla = _getch();
			if (tecla == 's' || tecla == 'S') exit(0);
		}
		contador++;
	}
}
void gameover()
{

	char tecla;
	int contador = 0;
	ConsoleColor clr = ConsoleColor::DarkRed;
	bool odd = false, border_odd = false;
	int text[26][71] = {
		{ 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 219, 219, 219, 219, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 219, 219, 219, 219, 219, 219, 250, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 219, 219, 219, 219, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 219, 219, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 250 },
		{ 250, 250, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 219, 219, 219, 219, 219, 219, 250, 250, 219, 219, 219, 219, 219, 219, 250, 219, 219, 219, 219, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 219, 219, 219, 219, 219, 219, 250, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 250 },
		{ 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 219, 219, 219, 219, 219, 219, 250, 250, 219, 219, 219, 219, 219, 219, 250, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 219, 219, 176, 176, 176, 176, 219, 219, 176, 176, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 176, 176, 219, 219, 250, 219, 219, 219, 219, 176, 176, 176, 176, 176, 176, 219, 219, 219, 219, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 219, 219, 219, 219, 219, 219, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 250, 250, 219, 219, 219, 219, 176, 176, 219, 219, 219, 219, 250, 250, 250, 219, 219, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 219, 219, 250, 219, 219, 176, 176, 219, 219, 250, 250, 219, 219, 176, 176, 176, 176, 176, 176, 219, 219, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 250, 250, 250, 250, 219, 219, 219, 219, 219, 219, 250, 250, 250, 250, 250, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 219, 219, 219, 219, 219, 219, 250, 250, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 250, 250, 250, 250, 250, 250 },
		{ 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250 },
	};



	Console::Clear();
	Console::Title = "<<GAME OVER>>";

	while (true)
	{
		int x = 1;
		int y = 10;
		//ESTABLECER EL TAMANO DE LA PANTALLA TODO EL TIEMPO PARA EVITAR QUE EL USUARIO LA CAMBIE
		Console::SetWindowSize(73, SCREEN_HEIGHT);

		Console::ForegroundColor = ConsoleColor::Yellow;
		Console::SetCursorPosition(16, 38); cout << "<<Presione [E] para salir del juego>>";

		/*LLENAR PANTALLA CON CARACTERES DE PUNTOS*/
		for (int F = 1; F < SCREEN_HEIGHT - 1; F++){

			if (F <= y || F >= (y + 26)){
				//Omitir las cordenadas donde se escribe el texto game over para evitar
				//solapar el texto
				if (odd){
					Console::ForegroundColor = ConsoleColor::DarkRed;
				}
				else{
					Console::ForegroundColor = ConsoleColor::Red;
				}

				for (int C = 0; C < 71; C++){
					Console::SetCursorPosition(C + 1, F);

					if (F == 38){
						if (C < 15 || C>51){
							cout << (char)250;
						}
					}
					else{
						cout << (char)250;
					}
				}

			}
			odd = !odd;
		}
		odd = !odd;

		/*ESCRIBIR EL ARRAY QUE DICE GAME OVER*/
		for (int F = 0; F < 26; F++){
			Console::SetCursorPosition(x, y++);

			if (odd){
				clr = ConsoleColor::DarkRed;
			}
			else{
				clr = ConsoleColor::Red;
			}

			for (int C = 0; C < 71; C++){
				int chr = text[F][C];
				if (chr == 250){
					Console::ForegroundColor = clr;
					cout << (char)chr;
				}
				else{
					Console::ForegroundColor = ConsoleColor::DarkRed;
					cout << (char)chr;
				}
			}
			odd = !odd;
		}


		/*>>>>>>>>>>DIBUJAR LOS BORDES<<<<<<<<<<<<*/

		//BORDE SUPERIOR
		for (int C = 0; C < 73; C++){
			Console::SetCursorPosition(C, 0);
			if (border_odd){
				Console::ForegroundColor = ConsoleColor::DarkRed;
				cout << (char)178;
			}
			else{
				Console::ForegroundColor = ConsoleColor::Red;
				cout << (char)176;
			}
			border_odd = !border_odd;

		}
		border_odd = !border_odd;

		//BORDE INFERIOR
		for (int C = 0; C < 73; C++){
			Console::SetCursorPosition(C, SCREEN_HEIGHT - 1);
			if (border_odd){
				Console::ForegroundColor = ConsoleColor::DarkRed;
				cout << (char)178;
			}
			else{
				Console::ForegroundColor = ConsoleColor::Red;
				cout << (char)176;
			}
			border_odd = !border_odd;

		}
		border_odd = !border_odd;

		//BORDE IZQUIERDO
		for (int F = 0; F < SCREEN_HEIGHT - 1; F++){
			Console::SetCursorPosition(0, F);
			if (border_odd){
				Console::ForegroundColor = ConsoleColor::DarkRed;
				cout << (char)178;
			}
			else{
				Console::ForegroundColor = ConsoleColor::Red;
				cout << (char)176;
			}
			border_odd = !border_odd;

		}

		//BORDE DERECHO
		for (int F = 0; F < SCREEN_HEIGHT - 1; F++){
			Console::SetCursorPosition(72, F);
			if (border_odd){
				Console::ForegroundColor = ConsoleColor::DarkRed;
				cout << (char)178;
			}
			else{
				Console::ForegroundColor = ConsoleColor::Red;
				cout << (char)176;
			}
			border_odd = !border_odd;

		}
		border_odd = !border_odd;
		/*>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<*/



		if (_kbhit())
		{
			tecla = _getch();
			if (tecla == 'e' || tecla == 'E') exit(0);
		}
		contador++;
	}
}
void escribir(char text[], ConsoleColor clr, int x, int y){
	Console::SetCursorPosition(x, y);
	Console::ForegroundColor = clr;
	cout << text;
}
void escribir_odd(char text[], bool *odd, ConsoleColor odd_clr, ConsoleColor even_clr, int x, int y){
	Console::SetCursorPosition(x, y);
	int i = 0;
	for (i; text[i] != '\0'; i++){

		if (*odd){
			Console::ForegroundColor = odd_clr;
		}
		else{
			Console::ForegroundColor = even_clr;
		}

		cout << text[i];
		*odd = !*odd;
	}

	if (i % 2 == 0){
		*odd = !*odd;
	}


}
void abrir_puerta(int mapa[FILAS][COLUMNAS]){
	/*
		Buscar la puerta y abrir la puerta en el mapa
	*/
	for (int f = 0; f < FILAS; f++){
		for (int c = 0; c < COLUMNAS; c++){
			if (mapa[f][c] == PUERTA){
				//Abrir puerta
				Console::SetCursorPosition(c, f);
				Console::ForegroundColor = COLOR_PUERTA;
				cout << CHR_PUERTA_ABIERTA;
			}
		}
	}
}



